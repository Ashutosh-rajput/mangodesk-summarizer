# A friendly name for your workflow, which will be shown in the GitHub Actions tab.
name: Build and Push Docker Image

# This section defines WHEN the workflow will run.
on:
  # Trigger the workflow on push events to the "main" branch.
  push:
    branches: [ "main" ]
  # You can also add other triggers, like pull requests.
  # pull_request:
  #   branches: [ "main" ]

# This section defines environment variables that are available to all jobs in the workflow.
env:
  # The name of the registry we are pushing to.
  REGISTRY: ghcr.io
  # The name of the Docker image. We use a variable provided by GitHub
  # to automatically get your repository name (e.g., your-username/your-repo-name).
  IMAGE_NAME: ${{ github.repository }}

# A workflow run is made up of one or more "jobs" that can run sequentially or in parallel.
jobs:
  # We define a single job called "build-and-push".
  build-and-push:
    # The type of virtual machine to run the job on. "ubuntu-latest" is a standard choice.
    runs-on: ubuntu-latest

    # This is a security best practice. We grant the job only the permissions it needs.
    # It needs to write to "packages" to push the Docker image to GHCR.
    # It needs to read "contents" to check out your code.
    permissions:
      contents: read
      packages: write

    # A job is made up of a sequence of "steps".
    steps:
      # Step 1: Check out your repository's code
      # This downloads your code onto the runner so the workflow can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to the GitHub Container Registry (GHCR)
      # This uses a pre-built action from Docker to handle the login.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          # ${{ github.actor }} is your GitHub username.
          username: ${{ github.actor }}
          # ${{ secrets.GITHUB_TOKEN }} is a special, temporary token that GitHub
          # automatically creates for the workflow run. You DO NOT need to create this secret yourself.
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Extract metadata (like tags) for the Docker image
      # This is a clever action that automatically creates useful tags for your image.
      - name: Extract metadata for Docker
        id: meta # This step will have an output ID of "meta"
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Step 4: Build the Docker image and push it to the registry
      # This is the main event!
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # The path to the directory containing the Dockerfile. "." means the root of the repo.
          context: .
          # We tell it to push the image after a successful build.
          push: true
          # Use the tags generated by the "meta" step in the previous step.
          # This will create tags like "latest" and a tag with the git commit SHA.
          tags: ${{ steps.meta.outputs.tags }}
          # Use the labels generated by the "meta" step.
          labels: ${{ steps.meta.outputs.labels }}